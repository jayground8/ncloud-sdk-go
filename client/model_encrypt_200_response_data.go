/*
ncloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Encrypt200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Encrypt200ResponseData{}

// Encrypt200ResponseData struct for Encrypt200ResponseData
type Encrypt200ResponseData struct {
	Ciphertext *string `json:"ciphertext,omitempty"`
}

// NewEncrypt200ResponseData instantiates a new Encrypt200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncrypt200ResponseData() *Encrypt200ResponseData {
	this := Encrypt200ResponseData{}
	return &this
}

// NewEncrypt200ResponseDataWithDefaults instantiates a new Encrypt200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncrypt200ResponseDataWithDefaults() *Encrypt200ResponseData {
	this := Encrypt200ResponseData{}
	return &this
}

// GetCiphertext returns the Ciphertext field value if set, zero value otherwise.
func (o *Encrypt200ResponseData) GetCiphertext() string {
	if o == nil || IsNil(o.Ciphertext) {
		var ret string
		return ret
	}
	return *o.Ciphertext
}

// GetCiphertextOk returns a tuple with the Ciphertext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Encrypt200ResponseData) GetCiphertextOk() (*string, bool) {
	if o == nil || IsNil(o.Ciphertext) {
		return nil, false
	}
	return o.Ciphertext, true
}

// HasCiphertext returns a boolean if a field has been set.
func (o *Encrypt200ResponseData) HasCiphertext() bool {
	if o != nil && !IsNil(o.Ciphertext) {
		return true
	}

	return false
}

// SetCiphertext gets a reference to the given string and assigns it to the Ciphertext field.
func (o *Encrypt200ResponseData) SetCiphertext(v string) {
	o.Ciphertext = &v
}

func (o Encrypt200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Encrypt200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ciphertext) {
		toSerialize["ciphertext"] = o.Ciphertext
	}
	return toSerialize, nil
}

type NullableEncrypt200ResponseData struct {
	value *Encrypt200ResponseData
	isSet bool
}

func (v NullableEncrypt200ResponseData) Get() *Encrypt200ResponseData {
	return v.value
}

func (v *NullableEncrypt200ResponseData) Set(val *Encrypt200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableEncrypt200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableEncrypt200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncrypt200ResponseData(val *Encrypt200ResponseData) *NullableEncrypt200ResponseData {
	return &NullableEncrypt200ResponseData{value: val, isSet: true}
}

func (v NullableEncrypt200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncrypt200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


