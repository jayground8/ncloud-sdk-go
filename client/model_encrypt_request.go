/*
ncloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EncryptRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptRequest{}

// EncryptRequest struct for EncryptRequest
type EncryptRequest struct {
	Plaintext string `json:"plaintext"`
	Context *string `json:"context,omitempty"`
}

type _EncryptRequest EncryptRequest

// NewEncryptRequest instantiates a new EncryptRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptRequest(plaintext string) *EncryptRequest {
	this := EncryptRequest{}
	this.Plaintext = plaintext
	return &this
}

// NewEncryptRequestWithDefaults instantiates a new EncryptRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptRequestWithDefaults() *EncryptRequest {
	this := EncryptRequest{}
	return &this
}

// GetPlaintext returns the Plaintext field value
func (o *EncryptRequest) GetPlaintext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plaintext
}

// GetPlaintextOk returns a tuple with the Plaintext field value
// and a boolean to check if the value has been set.
func (o *EncryptRequest) GetPlaintextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plaintext, true
}

// SetPlaintext sets field value
func (o *EncryptRequest) SetPlaintext(v string) {
	o.Plaintext = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *EncryptRequest) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptRequest) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *EncryptRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *EncryptRequest) SetContext(v string) {
	o.Context = &v
}

func (o EncryptRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["plaintext"] = o.Plaintext
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

func (o *EncryptRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plaintext",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncryptRequest := _EncryptRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncryptRequest)

	if err != nil {
		return err
	}

	*o = EncryptRequest(varEncryptRequest)

	return err
}

type NullableEncryptRequest struct {
	value *EncryptRequest
	isSet bool
}

func (v NullableEncryptRequest) Get() *EncryptRequest {
	return v.value
}

func (v *NullableEncryptRequest) Set(val *EncryptRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptRequest(val *EncryptRequest) *NullableEncryptRequest {
	return &NullableEncryptRequest{value: val, isSet: true}
}

func (v NullableEncryptRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


