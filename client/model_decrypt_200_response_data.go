/*
ncloud

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Decrypt200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Decrypt200ResponseData{}

// Decrypt200ResponseData struct for Decrypt200ResponseData
type Decrypt200ResponseData struct {
	Plaintext *string `json:"plaintext,omitempty"`
}

// NewDecrypt200ResponseData instantiates a new Decrypt200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecrypt200ResponseData() *Decrypt200ResponseData {
	this := Decrypt200ResponseData{}
	return &this
}

// NewDecrypt200ResponseDataWithDefaults instantiates a new Decrypt200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecrypt200ResponseDataWithDefaults() *Decrypt200ResponseData {
	this := Decrypt200ResponseData{}
	return &this
}

// GetPlaintext returns the Plaintext field value if set, zero value otherwise.
func (o *Decrypt200ResponseData) GetPlaintext() string {
	if o == nil || IsNil(o.Plaintext) {
		var ret string
		return ret
	}
	return *o.Plaintext
}

// GetPlaintextOk returns a tuple with the Plaintext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Decrypt200ResponseData) GetPlaintextOk() (*string, bool) {
	if o == nil || IsNil(o.Plaintext) {
		return nil, false
	}
	return o.Plaintext, true
}

// HasPlaintext returns a boolean if a field has been set.
func (o *Decrypt200ResponseData) HasPlaintext() bool {
	if o != nil && !IsNil(o.Plaintext) {
		return true
	}

	return false
}

// SetPlaintext gets a reference to the given string and assigns it to the Plaintext field.
func (o *Decrypt200ResponseData) SetPlaintext(v string) {
	o.Plaintext = &v
}

func (o Decrypt200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Decrypt200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Plaintext) {
		toSerialize["plaintext"] = o.Plaintext
	}
	return toSerialize, nil
}

type NullableDecrypt200ResponseData struct {
	value *Decrypt200ResponseData
	isSet bool
}

func (v NullableDecrypt200ResponseData) Get() *Decrypt200ResponseData {
	return v.value
}

func (v *NullableDecrypt200ResponseData) Set(val *Decrypt200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableDecrypt200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableDecrypt200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecrypt200ResponseData(val *Decrypt200ResponseData) *NullableDecrypt200ResponseData {
	return &NullableDecrypt200ResponseData{value: val, isSet: true}
}

func (v NullableDecrypt200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecrypt200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


